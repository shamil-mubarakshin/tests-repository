name: run-macos-matrix

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 5
    strategy:
      matrix:
        os: [macos-14, macos-15, macos-15-intel, macos-26]
        # xcode: [16.4, 26.0.1]
      fail-fast: false
    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v3

      - run: |
          xcodebuild -verbose -downloadPlatform iOS
          echo "==="
          xcodebuild -showsdks -json
          echo "==="
          xcrun simctl list --json
    # - name: Try cleanup
    #   continue-on-error: true
    #   run: |
    #     # toolchain_path=$(xcodebuild -showComponent metalToolchain | grep -i "^Toolchain Search Path:" | tail -1 | sed 's/^Toolchain Search Path: *//')
    #     # echo $toolchain_path
    #     sudo rm -rf /System/Library/AssetsV2/com_apple_MobileAsset_MetalToolchain
    #     # sudo rm -rf /private/var/run/com.apple.security.cryptexd/mnt/com.apple.MobileAsset.MetalToolchain-v17.1.324.0*
        
    # - uses: maxim-lobanov/setup-xcode@v1
    #   with:
    #     xcode-version: '${{ matrix.xcode }}'

    # - name: Try metalToolchain import
    #   run: |
    #     # xcodebuild -importComponent metalToolchain
    #     xcodebuild -verbose -downloadComponent metalToolchain -exportPath /tmp/metalToolchainDownload/
    #     ls -la /tmp/metalToolchainDownload/
    #     ls -la /tmp/metalToolchainDownload/MetalToolchain-17A324.exportedBundle
    #     cat /tmp/metalToolchainDownload/MetalToolchain-17A324.exportedBundle/ExportMetadata.plist
    #     sed -i '' -e 's/17A324/17A324e/g' /tmp/metalToolchainDownload/MetalToolchain-17A324.exportedBundle/ExportMetadata.plist
    #     xcodebuild -verbose -importComponent metalToolchain -importPath /tmp/metalToolchainDownload/MetalToolchain-17A324.exportedBundle/
  
    # - name: view various info
    #   continue-on-error: true
    #   run: |
    #     set -e
    #     TOOLCHAIN="$(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphoneos"
    #     TOOLCHAINS="$(xcode-select -p)/Toolchains"
    #     SDK="$(xcrun --sdk iphoneos --show-sdk-path)/usr/lib/swift"

    #     echo "default $TOOLCHAIN"
    #     ls -la $TOOLCHAIN
    #     echo "SDK path $SDK"
    #     ls -la $SDK
    #     echo "View $TOOLCHAINS"
    #     ls -la $TOOLCHAINS

    #     ls -la /System/Library/AssetsV2/com_apple_MobileAsset_MetalToolchain/4ab058bc1c53034b8c0a9baca6fba2d2b78bb965.asset/AssetData/Restore

    #     hdiutil attach /System/Library/AssetsV2/com_apple_MobileAsset_MetalToolchain/4ab058bc1c53034b8c0a9baca6fba2d2b78bb965.asset/AssetData/Restore/022-17211-415.dmg
    #     echo "====="
    #     ls -la /System/Library/AssetsV2/com_apple_MobileAsset_MetalToolchain

    # - name: view metal path
    #   continue-on-error: true
    #   run: |
    #     toolchain_path=$(xcodebuild -showComponent metalToolchain | grep -i "^Toolchain Search Path:" | tail -1 | sed 's/^Toolchain Search Path: *//')
    #     echo $toolchain_path
    #     ls -la $toolchainPath
        
    # - name: view python info
    #   run: |
    #     python --version
    #     which python
    
    # - name: python general info
    #   if: always()
    #   shell: python
    #   run: |
    #     import os
    #     print(os.environ['PATH'])

    # - name: python socket getfqdn()
    #   if: always()
    #   shell: python
    #   run: |
    #     import socket
    #     out = socket.getfqdn()
    #     print(f"Output: {out}")

    # - name: inline python socket getfqdn()
    #   if: always()
    #   run: |
    #     PYTHONVERBOSE=1 python -c "import socket; socket.getfqdn()"

    # - name: python socket gethostbyaddr()
    #   if: always()
    #   shell: python
    #   run: |
    #     import socket
    #     name = socket.gethostname()
    #     try:
    #       hostname, aliases, ipaddrs = socket.gethostbyaddr(name)
    #     except error:
    #       print(f"hostname: {hostname}")
    #       print(f"aliases: {aliases}")
    #       print(f"ipaddrs: {ipaddrs}")

    #     print(f"hostname: {hostname}")
    #     print(f"aliases: {aliases}")
    #     print(f"ipaddrs: {ipaddrs}")
    #     print(f"name: {name}")
        
    # - name: python socket gethostname()
    #   if: always()
    #   shell: python
    #   run: |
    #     import socket
    #     out = socket.gethostname()
    #     print(f"Output: {out}")

    # - name: trace v1
    #   if: always()
    #   run: |
    #     echo 'import socket; socket.getfqdn()' > test_script.py
    #     python -m trace --trace test_script.py
      
    # - name: run perl command v1
    #   if: always()
    #   run: |
    #     ip=$(ifconfig | awk '/inet / && $2 != "127.0.0.1" { print $2 }')
    #     echo $ip
    #     which perl
    #     perl -MSocket -E"say gethostbyaddr(inet_aton(\"$ip\"), AF_INET)"

    # - name: run trace
    #   if: always()
    #   run: |
    #     which dtruss
    #     echo 'import socket; socket.getfqdn()' > test_script.py
    #     sudo dtruss python test_script.py

     # -  shell: pwsh
     #    run: |
     #      $guestMacosVersion = sw_vers
     #      Write-Host $guestMacosVersion
     #      switch -regex ($guestMacosVersion[1]) {
     #          '12.\d' { $nextOSVersion = 'macOS Ventura|macOS Sonoma|macOS Sequoia' }
     #          '13.\d' { $nextOSVersion = 'macOS Sonoma|macOS Sequoia' }
     #          '14.\d' { $nextOSVersion = 'macOS Sequoia' }
     #      }
     #      Write-Host "nextOSVersion var = $nextOSVersion"
     #      Write-Host "========="
     #      $updates = /usr/sbin/softwareupdate --list
     #      $updates = $updates | Where-Object { $_ -match "(Label|Title):" } | Out-String
     #      Write-Host "updates var type = $($updates.gettype())"
     #      Write-Host "updates var = $updates"
     #      Write-Host "========="
     #      $listOfNewUpdates = $($($updates.Split("*")).Split("Title").where({$_ -match "Label:"}).Replace("Label: ", '').where({$_ -notmatch $nextOSVersion}))
     #      Write-Host $listOfNewUpdates
     #      Write-Host "listOfNewUpdates var type = $($listOfNewUpdates.gettype())"
      # - run: |
      #     download_path="/tmp/MonoFramework-MDK-6.12.0.188.macos10.xamarin.universal.pkg"
      #     url="https://download.mono-project.com/archive/6.12.0/macos-10-universal/MonoFramework-MDK-6.12.0.188.macos10.xamarin.universal.pkg"
      #     curl -4sSLo "$download_path" "$url" -w '%{http_code}'

      # - run: xcode-select -p

      # - run: ls -la /Library/Developer/CommandLineTools/SDKs

      # - run: xcrun --show-sdk-version

      # - name: Print env vars
      #   shell: pwsh
      #   run: 
      #     Get-ChildItem env:\

      # - run: echo $PATH

      # - run: |
      #     nslookup keyserver.ubuntu.com
      #     echo "=============="
      #     dscacheutil -q host -a name keyserver.ubuntu.com

      # - run: |
      #     ps -ax | fgrep -i mdns

      # - run: |
      #     brew update
      #     brew upgrade xz

      # - run: |
      #     xz -V
      #     which xz
      # - run: npm install
      # - run: |
      #     clt_placeholder="/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress"
      #     sudo touch $clt_placeholder
          
      #     /usr/sbin/softwareupdate -l

      # - shell: pwsh
      #   run: |
      #     function Run-Command {
      #         param (
      #             [Parameter(Mandatory=$true)]
      #             [string] $Command,
      #             [switch] $SuppressStderr
      #         )
      #         # Bash trick to suppress and show error output because some commands write to stderr (for example, "python --version")
      #         $redirectOutputArguments = If ($SuppressStderr) { "2> /dev/null" } Else { "2>&1" }
      #         $stdout = & bash -c "${Command} ${redirectOutputArguments}"
          
      #         return $stdout
      #     }

      #     function Take-Part {
      #         param (
      #             [Parameter(ValueFromPipeline)]
      #             [string] $toolOutput,
      #             [string] $Delimiter = " ",
      #             [int[]] $Part
      #         )
      #         $parts = $toolOutput.Split($Delimiter, [System.StringSplitOptions]::RemoveEmptyEntries)
      #         $selectedParts = $parts[$Part]
      #         return [string]::Join($Delimiter, $selectedParts)
      #     }
          
      #     "Run-Command composer --version"
      #     Run-Command "composer --version"
          
      #     "Run-Command composer --version | Take-Part -Part 2" 
      #     Run-Command "composer --version" | Take-Part -Part 2
          
      #     "Run-Command composer --version | Select-Object -First 1 | Take-Part -Part 2" 
      #     Run-Command "composer --version" | Select-Object -First 1 | Take-Part -Part 2
