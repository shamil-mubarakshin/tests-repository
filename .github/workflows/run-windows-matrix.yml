name: run-windows-matrix

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022, windows-2025]
      fail-fast: false
    steps:
    - run: |
        & "$env:ProgramFiles\Microsoft SQL Server\170\DAC\bin\sqlpackage.exe" /version
    # - if: always()
    #   shell: pwsh
    #   run: |
    #     ssh -V
    #     ssh-keyscan github.com
    # - if: always()
    #   shell: bash
    #   run: |
    #     ssh -V
    #     ssh-keyscan github.com
    # - if: always()
    #   shell: pwsh
    #   run: |
    #     & 'C:\Program Files\Git\usr\bin\ssh-keyscan.exe' github.com
        
    # - run: |
    #     if (Get-Command docker -ErrorAction SilentlyContinue) {
    #         $dockerVersion = docker --version
    #         if ($dockerVersion) {
    #             Write-Output "Docker is installed. Version: $dockerVersion"
    #         } else {
    #             Write-Output "Docker is installed but the version could not be retrieved."
    #         }
    #     } else {
    #         Write-Output "Docker is not installed."
    #     }

    # - run: |
    #     $Version = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion"
    #     Write-Host "Version $($Version.ReleaseId) (OS Build $ $($Version.CurrentMajorVersionNumber).$($Version.CurrentMinorVersionNumber).$($Version.CurrentBuildNumber).$($Version.UBR))"
        
    #     docker run -i --rm mcr.microsoft.com/windows/servercore:ltsc2025 cmd /c ver
    # - run: |
    #     get-process
    #     dir C:\WindowsAzure\ -recurse
    #   name: 'View WindowsAzure folders 1'
    
    # - run: |
    #     get-process
    #     dir C:\Packages\ -recurse
    #   name: 'View Packages folders 1'

    # - run: start-sleep 600

    # - run: |
    #     get-process
    #     dir C:\WindowsAzure\ -recurse
    #   name: 'View WindowsAzure folders 2'
    
    # - run: |
    #     get-process
    #     dir C:\Packages\ -recurse
    #   name: 'View Packages folders 2'
      
      # - run: get-childitem c:\post-generation

      # - run: |
      #     Write-Host "Warmup devenv.exe"
      #     $vsInstallRoot = (Get-VisualStudioInstance).InstallationPath
      #     $devEnvPath = "$vsInstallRoot\Common7\IDE\devenv.exe"
      #     Write-Host "Initialize Visual Studio Experimental Instance"
      #     & "$devEnvPath" /RootSuffix Exp /ResetSettings General.vssettings /Command File.Exit | Out-Null
      #     Write-Host "Initialized"
      #     Write-Host "Start Run /updateconfiguration"
      #     cmd.exe /c "`"$devEnvPath`" /updateconfiguration"
      #     Write-Host "/updateconfiguration completed"
      #     Write-Host "warm up test project"
      #     $warmup_vdproj = $(Join-Path "C:\post-generation" "warmup.vdproj")
      #     & "$devEnvPath" $warmup_vdproj /build Release | Out-Null
      #     Write-Host "warm up completed"

      # - name: test wmic
      #   run: wmic context
      #   if: always()

      # - name: install wmic
      #   run: |
      #     if ($env:ImageOS -eq 'win25') {
      #       DISM /Online /Add-Capability /CapabilityName:WMIC~~~~
      #     }
      #   if: always()

      # - name: test wmic
      #   run: wmic context
      #   if: always()
      # - name: Run pwsh
      #   run: |
      #     Get-Content "$env:USERPROFILE/.docker/config.json"
      #     docker
      #   shell: pwsh
      # - name: append env
      #   shell: pwsh
      #   run: |
      #     $env:PATH
      #     "c:\temp" | Out-File -FilePath "$env:GITHUB_PATH" -Append
      #     "show env:PATH"
      #     $env:PATH
      #     "show GHPATH"
      #     $env:GITHUB_PATH
      # - name: show PATH
      #   shell: pwsh
      #   run: |
      #     "show env:PATH"
      #     $env:PATH
      #     "show GHPATH"
      #     $env:GITHUB_PATH
          
